"""
This is the Action Handler. It takes the Actions generated by the various
commands, and sends them to all the relevant logic modules. Each command
generates up to 3 actions. The first checks to see if a player *can* do
something. The second does it, and the third notifies everything that the
player did it.

@author: Fletcher Haynes
@copyright: (c)2004 Fletcher Haynes, All rights reserved.
"""
import os

import MudWorld
import MudAction
import MudDatabase
import MudPortal
import MudRoom
import MudConst


# Decide what to do with an action
class MudActionHandler:
    def doAction(self, action):
        if action.actionType   == 'cansay':
            self.say(action)
        elif action.actionType == 'canlook':
            self.look(action)
        elif action.actionType == 'do':
            self.routeAction(action)
        elif action.actionType == 'vision':
            zone_id = action.data1
            room_id = action.data2
            self.actionRoomCharacters(action, zone_id, room_id)
        elif action.actionType == 'audible':
            self.actionRoomCharacters(action)
        elif action.actionType == 'attemptenterportal':
            self.enterPortal(action)
        elif action.actionType == 'attempttransport':
            self.transport(action)
        elif action.actionType == 'forcetransport':
            self.forceTransport(action)
        elif action.actionType == 'spawnitem':
            self.spawnItem(action)
        elif action.actionType == 'destroyitem':
            self.destroyItem(action)
        elif action.actionType == 'attemptgiveitem':
            self.giveItem(action)
        elif action.actionType == 'destroychar':
            self.destroyCharacter(action)
        elif action.actionType == 'attemptgetitem':
            self.getItem(action)
        elif action.actionType == 'attemptdropitem':
            self.dropItem(action)
        elif action.actionType == 'spawncharacter':
            self.spawnCharacter(action)
        elif action.actionType == 'modifystat':
            self.modifyStat(action)
        elif action.actionType == 'addstat':
            self.addStat(action)
        elif action.actionType == 'delstat':
            self.delStat(action)
        elif action.actionType == 'tick':
            self.doTick(action)
        else:
            pass
        
    def routeAction(self, action):
        if action.data1 == 'character':
            action.data2.doAction(action)
        elif action.data1 == 'item':
            action.data2.doAction(action)
        elif action.data1 == 'room':
            action.data2.doAction(action)
        elif action.data1 == 'portal':
            action.data2.doAction(action)
        elif action.data1 == 'zone':
            action.data2.doAction(action)
    
    def doTick(self, action):
        for eachZone in MudDatabase.db.zones.values():
            eachZone.doAction(action)
        for eachChar in MudDatabase.db.characters.values():
            eachChar.doAction(action)
    
    def forceTransport(self, action):
        if not MudDatabase.db.zones.has_key(action.data1):
            action.playerRef.writeWithPrompt("Error - Invalid zone ID!")
            return
        
        c = action.playerRef
        old_room = action.playerRef.roomRef

        if c.zoneRef.id_num == int(action.data1):
            change_zone = False
            try:
                new_room = MudDatabase.db.returnRoomRef(c.zoneRef.id_num, int(action.data2))
            except:
                c.writeWithPrompt("Error - Invalid room ID!")
                return
        else:
            
            change_zone = True
            new_zone = MudDatabase.db.returnZoneRef(action.data1)
            try:
                new_room = MudDatabase.db.returnRoomRef(new_zone.id_num, int(action.data2))
            except:
                c.writeWithPrompt("Error - Invalid room ID!")
                return
            
        old_zone = c.zoneRef
        
        if change_zone:
            old_zone.removeCharacter(c)
            c.setZone(new_zone.id_num)
            new_zone.addCharacter(c)
            
        old_room.removeCharacter(c)
        c.setRoom(new_room.id_num)
        new_room.addCharacter(c)
        
        if change_zone:
            action.actionType = 'enterzone'
            new_zone.doAction(action)
            c.doAction(action)
            
        action.actionType = 'enterroom'
        MudWorld.world.handleInput(c, 'look')
        new_room.doAction(action)
        self.actionRoomCharacters(action, c.zone, c.room)
        self.actionRoomItems(action, c.zone, c.room)

        
    def transport(self, action):
        c = action.playerRef
        old_room = action.playerRef.roomRef
        new_room = action.data1
        if c.zoneRef.id_num == int(action.data2):
            change_zone = False
        else:
            change_zone = True
            new_zone = MudDatabase.db.returnZoneRef(action.data2)
            
        old_zone = c.zoneRef
        
        if change_zone:
            action.actionType = 'canleavezone'
            if old_zone.doAction(action) == 1:
                return
            if c.doAction(action) == 1:
                return
            action.actionType = 'canenterzone'
            if new_zone.doAction(action) == 1:
                return
            if c.doAction(action) == 1:
                return
        action.actionType = 'canleaveroom'
        if old_room.doAction(action) == 1:
            return
        if c.doAction(action) == 1:
            return
        action.actionType = 'canenterroom'
        if new_room.doAction(action) == 1:
            return
        if c.doAction(action) == 1:
            return
        
        if change_zone:
            old_zone.delCharacter(c)
            c.setZone(new_zone.id_num)
            new_zone.addCharacter(c)
            
        old_room.removeCharacter(c)
        c.setRoom(new_room.id_num)
        new_room.addCharacter(c)
        
        if change_zone:
            action.actionType = 'enterzone'
            new_zone.doAction(action)
            c.doAction(action)
            
        action.actionType = 'enterroom'
        MudWorld.world.handleInput(c, 'look')
        new_room.doAction(action)
        self.actionRoomCharacters(action, c.zone, c.room)
        self.actionRoomItems(action, c.zone, c.room)
        c.writePlain('\r\n')

        
    def giveItem(self, action):
        g = action.playerRef
        r = action.data1
        i = action.data2
        q = int(action.data3)
        t_id = i.template_id
        if i.isQuantity == True and q < 1:
            g.writeWithPrompt("You cannot give away that few of an item!")
            return
        
        if i.isQuantity == True and q > i.quantity:
            g.writeWithPrompt("You do not have that many!")
            return
        
        action.actionType = 'candropitem'
        if i.doAction(action) == 1:
            return
        if g.doAction(action) == 1:
            return
        action.actionType = 'canreceiveitem'
        if i.doAction(action) == 1:
            return
        if r.doAction(action) == 1:
            return
        
        if i.isQuantity and q != i.quantity:
            newItem = MudDatabase.db.generateItemFromTemplate(t_id)
            newItem.isQuantity = True
            newItem.setQuantity(q)
            i.setQuantity(i.quantity - q)
            r.addItem(newItem)
            newItem.owner = r.name
            MudDatabase.db.addItem(newItem)
            self.actionRoomCharacters(action, g.zoneRef.id_num, g.roomRef.id_num)
            return

        g.removeItem(i)
        r.addItem(i)
        i.owner = r.name
        MudDatabase.db.addItem(i)
        self.actionRoomCharacters(action, g.zoneRef.id_num, g.roomRef.id_num)
        g.writeWithPrompt("You give "+r.name+": "+i.name)
        r.writeWithPrompt(g.name+" gives you: "+i.name)
        return
            
        
            
    def destroyItem(self, action):
        i = action.data1
        c = action.playerRef

        new_action = MudAction.MudAction()
        new_action.actionType = 'vision'
        new_action.string     = c.name+' snaps his fingers and a '+i.name+' shimmers out of existence.'
        self.actionRoomCharacters(new_action, c.zone, c.room)
        
        i.room.removeItem(i)
        MudDatabase.db.removeItem(i)
        
    def destroyCharacter(self, action):
        t = action.data1
        c = action.playerRef
        
        if t.sockRef != '':
            c.writeWithPrompt("You cannot destroy a player!")
            return
        
        new_action = MudAction.MudAction()
        new_action.actionType = 'vision'
        new_action.string     = c.name+' snaps his fingers and a '+t.name+' shimmers out of existence.'
        self.actionRoomCharacters(new_action, c.zone, c.room)
        
        for eachItem in t.items.values():
            MudDatabase.db.removeItem(eachItem)
            
        t.zoneRef.removeCharacter(t)
        t.roomRef.removeCharacter(t)
        t.zoneRef = None
        t.roomRef = None
        MudDatabase.db.removeCharacter(t)
        mob_file = MudConst.mob_dir+str(t.name)+'.xml'
        try:
            os.remove(mob_file)
        except:
            print "In DestroyCharacter: Mob File does not exist"

            
    def getItem(self, action):
        # Fix quantity code in both this and drop item
        c = action.playerRef
        i = action.data1
        r = action.playerRef.roomRef
        z = action.playerRef.zoneRef
        q = action.data2
        
    
        
        if i.isQuantity == True and q < 1:
            c.writeWithPrompt("You cannot get less than one of an item!")
            return
        
        if i.isQuantity == True and q > i.quantity:
            c.writeWithPrompt("There are not that many to get!")
            return
        
        action.actionType = 'cangetitem'
        if i.doAction(action) == 1:
            return
        if r.doAction(action) == 1:
            return
        if z.doAction(action) == 1:
            return
        if c.doAction(action) == 1:
            return

        t_id = i.template_id
        
        if i.isQuantity == True and q != i.quantity:
            newItem = MudDatabase.db.generateItemFromTemplate(t_id)
            newItem.isQuantity = True
            newItem.quantity = q
            i.quantity = i.quantity - q
            r.removeItem(newItem)
            c.addItem(newItem)
            newItem.room = None
            newItem.zone = None
            newItem.owner = c.name
            MudDatabase.db.addItem(newItem)
            action.actionType = 'getitem'
            r.doAction(action)
            newItem.doAction(action)
            self.actionRoomCharacters(action, z.id_num, r.id_num)
            self.actionRoomItems(action, z.id_num, r.id_num)
        else:
            r.removeItem(i)
            c.addItem(i)
            i.room = None
            i.zone = None
            i.owner = c.name
            action.actionType = 'getitem'
            r.doAction(action)
            i.doAction(action)
            self.actionRoomCharacters(action, z.id_num, r.id_num)
            self.actionRoomItems(action, z.id_num, r.id_num)
        
    def dropItem(self, action):
        c = action.playerRef
        i = action.data1
        r = action.playerRef.roomRef
        z = action.playerRef.zoneRef
        q = action.data2
        
        if i.isQuantity == True and q < 1:
            c.writeWithPrompt("You cannot drop less than one of an item!")
            return
        
        if i.isQuantity == True and q > i.quantity:
            c.writeWithPrompt("There are not that many to drop!")
            return
        
        action.actionType = 'candropitem'
        if i.doAction(action) == 1:
            return
        if r.doAction(action) == 1:
            return
        if c.doAction(action) == 1:
            return
        
        t_id = i.template_id
        
        if i.isQuantity == True and q != i.quantity:
            newItem = MudDatabase.db.generateItemFromTemplate(t_id)
            newItem.isQuantity = True
            newItem.quantity = q
            i.quantity = i.quantity - q
            c.removeItem(newItem)
            r.addItem(newItem)
            newItem.room = c.roomRef
            newItem.zone = c.zoneRef
            newItem.owner = None
            r.addItem(newItem)
            MudDatabase.db.addItem(newItem)
            action.actionType = 'dropitem'
            r.doAction(action)
            newItem.doAction(action)

            self.actionRoomCharacters(action, z.id_num, r.id_num)
            self.actionRoomItems(action, z.id_num, r.id_num)
        else:
            c.removeItem(i)
            r.addItem(i)
            i.room = c.roomRef
            i.zone = c.zoneRef
            i.owner = None
            action.actionType = 'dropitem'
            r.doAction(action)
            i.doAction(action)

            self.actionRoomCharacters(action, z.id_num, r.id_num)
            self.actionRoomItems(action, z.id_num, r.id_num)        
        
    def spawnItem(self, action):
        if MudDatabase.db.i_templates.has_key(action.data1):
            newItem = MudDatabase.db.generateItemFromTemplate(action.data1)
            MudDatabase.db.addItem(newItem)
            newItem.zone = MudDatabase.db.returnZoneRef(action.playerRef.zone)
            newItem.room = MudDatabase.db.returnRoomRef(action.playerRef.zone, action.playerRef.room)
            action.playerRef.roomRef.addItem(newItem)
            action.data1 = newItem
            action.playerRef.roomRef.doAction(action)
            new_action = MudAction.MudAction()
            new_action.actionType = 'vision'
            new_action.string     = action.playerRef.name+ ' snaps his fingers and a '+newItem.name+' shimmers into existence!'
            self.actionRoomCharacters(new_action, action.playerRef.zone, action.playerRef.room)
        else:
            action.playerRef.writeWithPrompt("Invalid template ID!")
    
    def spawnCharacter(self, action):
        if MudDatabase.db.c_templates.has_key(action.data1):
            newChar = MudDatabase.db.generateCharFromTemplate(action.data1)
            MudDatabase.db.addCharacter(newChar)
            newChar.zoneRef = MudDatabase.db.returnZoneRef(action.playerRef.zone)
            newChar.roomRef = MudDatabase.db.returnRoomRef(action.playerRef.zone, action.playerRef.room)
            newChar.zone = int(newChar.zoneRef.id_num)
            newChar.room = int(newChar.roomRef.id_num)
            action.data1 = newChar
            newChar.zoneRef.addCharacter(newChar)
            newChar.roomRef.addCharacter(newChar)
            newChar.zoneRef.doAction(action)
            newChar.roomRef.doAction(action)
            new_action = MudAction.MudAction()
            new_action.actionType = 'vision'
            new_action.string     = action.playerRef.name+ ' snaps his fingers and a '+newChar.name+' shimmers into existence!'
            self.actionRoomCharacters(new_action, action.playerRef.zone, action.playerRef.room)

        else:
            action.playerRef.writeWithPrompt("Invalid template ID!")
            
    def enterPortal(self, action):
        # Some assignments for brevity's sake
        p = action.playerRef.roomRef.findPortalByName(action.data1)
        # First, find out if the entrance is valid
        if p == 0:
            if not action.playerRef.statistics.has_key('buildwalk'):
                action.playerRef.writeWithPrompt("Go where?")
                return
            elif action.playerRef.statistics['buildwalk'] == True:
                if action.data1.lower() == 'north':
                    newPortal = MudPortal.MudPortal()
                    newPortal.id_num = action.playerRef.zoneRef.generateNextPortalId()
                    newPortal.name = action.data1.capitalize()
                    newPortal.addLogic('basicPortalLogic')
                    
                    new_room = MudRoom.MudRoom()
                    new_room.id_num = action.playerRef.zoneRef.generateNextRoomId()
                    newPortal.target_zone = action.playerRef.zoneRef.id_num
                    newPortal.target_room = new_room.id_num
                    action.playerRef.roomRef.addPortal(newPortal)
                    action.playerRef.zoneRef.addRoom(new_room)
                    
                    newPortal2 = MudPortal.MudPortal()
                    newPortal2.id_num = action.playerRef.zoneRef.generateNextPortalId()
                    newPortal2.name = 'South'
                    newPortal2.target_zone = action.playerRef.zoneRef.id_num
                    newPortal2.target_room = action.playerRef.roomRef.id_num
                    newPortal2.addLogic('basicPortalLogic')
                    new_room.addPortal(newPortal2)
                elif action.data1.lower() == 'south':
                    newPortal = MudPortal.MudPortal()
                    newPortal.id_num = action.playerRef.zoneRef.generateNextPortalId()
                    newPortal.name = action.data1.capitalize()
                    newPortal.addLogic('basicPortalLogic')
                    
                    new_room = MudRoom.MudRoom()
                    new_room.id_num = action.playerRef.zoneRef.generateNextRoomId()
                    newPortal.target_zone = action.playerRef.zoneRef.id_num
                    newPortal.target_room = new_room.id_num
                    action.playerRef.roomRef.addPortal(newPortal)
                    action.playerRef.zoneRef.addRoom(new_room)
                    
                    newPortal2 = MudPortal.MudPortal()
                    newPortal2.id_num = action.playerRef.zoneRef.generateNextPortalId()
                    newPortal2.name = 'North'
                    newPortal2.target_zone = action.playerRef.zoneRef.id_num
                    newPortal2.target_room = action.playerRef.roomRef.id_num
                    newPortal2.addLogic('basicPortalLogic')
                    new_room.addPortal(newPortal2)
                elif action.data1.lower() == 'east':
                    newPortal = MudPortal.MudPortal()
                    newPortal.id_num = action.playerRef.zoneRef.generateNextPortalId()
                    newPortal.name = action.data1.capitalize()
                    newPortal.addLogic('basicPortalLogic')
                    
                    new_room = MudRoom.MudRoom()
                    new_room.id_num = action.playerRef.zoneRef.generateNextRoomId()
                    newPortal.target_zone = action.playerRef.zoneRef.id_num
                    newPortal.target_room = new_room.id_num
                    action.playerRef.roomRef.addPortal(newPortal)
                    action.playerRef.zoneRef.addRoom(new_room)
                    
                    newPortal2 = MudPortal.MudPortal()
                    newPortal2.id_num = action.playerRef.zoneRef.generateNextPortalId()
                    newPortal2.name = 'West'
                    newPortal2.target_zone = action.playerRef.zoneRef.id_num
                    newPortal2.target_room = action.playerRef.roomRef.id_num
                    newPortal2.addLogic('basicPortalLogic')
                    new_room.addPortal(newPortal2)
                elif action.data1.lower() == 'west':
                    newPortal = MudPortal.MudPortal()
                    newPortal.id_num = action.playerRef.zoneRef.generateNextPortalId()
                    newPortal.name = action.data1.capitalize()
                    newPortal.addLogic('basicPortalLogic')
                    
                    new_room = MudRoom.MudRoom()
                    new_room.id_num = action.playerRef.zoneRef.generateNextRoomId()
                    newPortal.target_zone = action.playerRef.zoneRef.id_num
                    newPortal.target_room = new_room.id_num
                    action.playerRef.roomRef.addPortal(newPortal)
                    action.playerRef.zoneRef.addRoom(new_room)
                    
                    newPortal2 = MudPortal.MudPortal()
                    newPortal2.id_num = action.playerRef.zoneRef.generateNextPortalId()
                    newPortal2.name = 'East'
                    newPortal2.addLogic('basicPortalLogic')
                    newPortal2.target_zone = action.playerRef.zoneRef.id_num
                    newPortal2.target_room = action.playerRef.roomRef.id_num
                    new_room.addPortal(newPortal2)
                elif action.data1.lower() == 'northeast':
                    newPortal = MudPortal.MudPortal()
                    newPortal.id_num = action.playerRef.zoneRef.generateNextPortalId()
                    newPortal.name = action.data1.capitalize()
                    newPortal.addLogic('basicPortalLogic')
                    
                    new_room = MudRoom.MudRoom()
                    new_room.id_num = action.playerRef.zoneRef.generateNextRoomId()
                    newPortal.target_zone = action.playerRef.zoneRef.id_num
                    newPortal.target_room = new_room.id_num
                    action.playerRef.roomRef.addPortal(newPortal)
                    action.playerRef.zoneRef.addRoom(new_room)
                    
                    newPortal2 = MudPortal.MudPortal()
                    newPortal2.id_num = action.playerRef.zoneRef.generateNextPortalId()
                    newPortal2.name = 'Southwest'
                    newPortal2.addLogic('basicPortalLogic')
                    newPortal2.target_zone = action.playerRef.zoneRef.id_num
                    newPortal2.target_room = action.playerRef.roomRef.id_num
                    new_room.addPortal(newPortal2)
                elif action.data1.lower() == 'northwest':
                    newPortal = MudPortal.MudPortal()
                    newPortal.id_num = action.playerRef.zoneRef.generateNextPortalId()
                    newPortal.name = action.data1.capitalize()
                    newPortal.addLogic('basicPortalLogic')
                    
                    new_room = MudRoom.MudRoom()
                    new_room.id_num = action.playerRef.zoneRef.generateNextRoomId()
                    newPortal.target_zone = action.playerRef.zoneRef.id_num
                    newPortal.target_room = new_room.id_num
                    action.playerRef.roomRef.addPortal(newPortal)
                    action.playerRef.zoneRef.addRoom(new_room)
                    
                    newPortal2 = MudPortal.MudPortal()
                    newPortal2.id_num = action.playerRef.zoneRef.generateNextPortalId()
                    newPortal2.name = 'Southeast'
                    newPortal2.addLogic('basicPortalLogic')
                    newPortal2.target_zone = action.playerRef.zoneRef.id_num
                    newPortal2.target_room = action.playerRef.roomRef.id_num
                    new_room.addPortal(newPortal2)
                elif action.data1.lower() == 'southeast':
                    newPortal = MudPortal.MudPortal()
                    newPortal.id_num = action.playerRef.zoneRef.generateNextPortalId()
                    newPortal.name = action.data1.capitalize()
                    newPortal.addLogic('basicPortalLogic')
                    
                    new_room = MudRoom.MudRoom()
                    new_room.id_num = action.playerRef.zoneRef.generateNextRoomId()
                    newPortal.target_zone = action.playerRef.zoneRef.id_num
                    newPortal.target_room = new_room.id_num
                    action.playerRef.roomRef.addPortal(newPortal)
                    action.playerRef.zoneRef.addRoom(new_room)
                    
                    newPortal2 = MudPortal.MudPortal()
                    newPortal2.id_num = action.playerRef.zoneRef.generateNextPortalId()
                    newPortal2.name = 'Northwest'
                    newPortal2.addLogic('basicPortalLogic')
                    newPortal2.target_zone = action.playerRef.zoneRef.id_num
                    newPortal2.target_room = action.playerRef.roomRef.id_num
                    new_room.addPortal(newPortal2)
                elif action.data1.lower() == 'southwest':
                    newPortal = MudPortal.MudPortal()
                    newPortal.id_num = action.playerRef.zoneRef.generateNextPortalId()
                    newPortal.name = action.data1.capitalize()
                    newPortal.addLogic('basicPortalLogic')
                    
                    new_room = MudRoom.MudRoom()
                    new_room.id_num = action.playerRef.zoneRef.generateNextRoomId()
                    newPortal.target_zone = action.playerRef.zoneRef.id_num
                    newPortal.target_room = new_room.id_num
                    action.playerRef.roomRef.addPortal(newPortal)
                    action.playerRef.zoneRef.addRoom(new_room)
                    
                    newPortal2 = MudPortal.MudPortal()
                    newPortal2.id_num = action.playerRef.zoneRef.generateNextPortalId()
                    newPortal2.name = 'Northeast'
                    newPortal2.addLogic('basicPortalLogic')
                    newPortal2.target_zone = action.playerRef.zoneRef.id_num
                    newPortal2.target_room = action.playerRef.roomRef.id_num
                    new_room.addPortal(newPortal2)
                elif action.data1.lower() == 'up':
                    
                    newPortal = MudPortal.MudPortal()
                    newPortal.id_num = action.playerRef.zoneRef.generateNextPortalId()
                    newPortal.name = action.data1.capitalize()
                    newPortal.addLogic('basicPortalLogic')
                    
                    new_room = MudRoom.MudRoom()
                    new_room.id_num = action.playerRef.zoneRef.generateNextRoomId()
                    newPortal.target_zone = action.playerRef.zoneRef.id_num
                    newPortal.target_room = new_room.id_num
                    action.playerRef.roomRef.addPortal(newPortal)
                    action.playerRef.zoneRef.addRoom(new_room)
                    
                    newPortal2 = MudPortal.MudPortal()
                    newPortal2.id_num = action.playerRef.zoneRef.generateNextPortalId()
                    newPortal2.name = 'Down'
                    newPortal2.addLogic('basicPortalLogic')
                    newPortal2.target_zone = action.playerRef.zoneRef.id_num
                    newPortal2.target_room = action.playerRef.roomRef.id_num
                    new_room.addPortal(newPortal2)
                elif action.data1.lower() == 'down':
                    newPortal = MudPortal.MudPortal()
                    newPortal.id_num = action.playerRef.zoneRef.generateNextPortalId()
                    newPortal.name = action.data1.capitalize()
                    newPortal.addLogic('basicPortalLogic')
                    
                    new_room = MudRoom.MudRoom()
                    new_room.id_num = action.playerRef.zoneRef.generateNextRoomId()
                    newPortal.target_zone = action.playerRef.zoneRef.id_num
                    newPortal.target_room = new_room.id_num
                    action.playerRef.roomRef.addPortal(newPortal)
                    action.playerRef.zoneRef.addRoom(new_room)
                    
                    newPortal2 = MudPortal.MudPortal()
                    newPortal2.id_num = action.playerRef.zoneRef.generateNextPortalId()
                    newPortal2.name = 'Up'
                    newPortal2.addLogic('basicPortalLogic')
                    newPortal2.target_zone = action.playerRef.zoneRef.id_num
                    newPortal2.target_room = action.playerRef.roomRef.id_num
                    new_room.addPortal(newPortal2)
                else:
                    action.playerRef.writeWithPrompt("You cannot create custom portals in buildwalk mode!")
                    return
                
                action.playerRef.roomRef.removeCharacter(action.playerRef)
                action.playerRef.setRoom(new_room.id_num)
                new_room.addCharacter(action.playerRef)
                new_room.addLogic('basicRoomLogic')
                MudWorld.world.handleInput(action.playerRef, 'look')
                return
                
            else:
                action.playerRef.writeWithPrompt("Go where?")
                return
        c = action.playerRef
        old_room = action.playerRef.roomRef
        old_zone = action.playerRef.zoneRef
        new_room = MudDatabase.db.returnRoomRef(p.target_zone, p.target_room)
        new_zone = MudDatabase.db.returnZoneRef(p.target_zone)
        
        # Is the player changing zones?
        if action.playerRef.zoneRef.id_num == p.target_zone:
            change_zones = False
        else:
            old_zone = MudDatabase.db.returnZoneRef(action.playerRef.zoneRef.id_num)
            new_zone = MudDatabase.db.returnZoneRef(p.target_zone)
            change_zones = True
            
        # Do queries for changing zones
        if change_zones:
            action.actionType = 'canleavezone'
            if old_zone.doAction(action) == 1:
                return
            if c.doAction(action) == 1:
                return
            action.actionType = 'canenterzone'
            if old_zone.doAction(action) == 1:
                return
            if c.doAction(action) == 1:
                return
            
        # Do queries for changing rooms
        action.actionType = 'canleaveroom'
        if old_room.doAction(action) == 1:
            return
        if c.doAction(action) == 1:
            return
        action.actionType = 'canenteroom'
        if new_room.doAction(action) == 1:
            return
        if c.doAction(action) == 1:
            return
        
        if change_zones:
            action.actionType = 'leavezone'
            old_zone.doAction(action)
            c.doAction(action)
        
        action.actionType = 'leaveroom'
        self.actionRoomCharacters(action, old_zone, old_room)
        self.actionRoomItems(action, old_zone.id_num, old_room.id_num)
        old_room.doAction(action)
        action.actionType = 'enterportal'
        p.doAction(action)
        c.doAction(action)
        
        if change_zones:
            old_zone.delCharacter(c)
            c.setZone(new_zone.id_num)
            new_zone.addCharacter(c)
        
        old_room.removeCharacter(c)
        c.setRoom(new_room.id_num)
        new_room.addCharacter(c)
        
        if change_zones:
            action.actionType = 'enterzone'
            new_zone.doAction(action)
            c.doAction(action)
            
        action.actionType = 'enterroom'

        action.playerRef.writeWithPrompt("You go "+action.data1)
        MudWorld.world.handleInput(c, 'look')
        new_room.doAction(action)
        self.actionRoomCharacters(action, c.zone, c.room)
        self.actionRoomItems(action, c.zone, c.room)
            
        
    def look(self, action):
        if action.playerRef.doAction(action) == 1:
            return
        if action.playerRef.roomRef.doAction(action) == 1:
            return
        if action.playerRef.zoneRef.doAction(action) == 1:
            return
        
        if action.string == '':
            action.actionType = 'look'
            action.playerRef.roomRef.doAction(action)
            for eachPortal in action.playerRef.roomRef.portals.values():
                eachPortal.doAction(action)
            self.actionRoomCharacters(action, action.playerRef.zone, action.playerRef.room)
            self.actionRoomItems(action, action.playerRef.zone, action.playerRef.room)
            action.playerRef.writeWithPrompt("")
            
        else:
            action.actionType = 'lookat'
            for eachChar in action.playerRef.roomRef.characters.values():
                if eachChar.name.lower() == action.string.lower():
                    eachChar.doAction(action)
                    return
            for eachItem in action.playerRef.roomRef.items.values():
                if eachItem.name.lower() == action.string.lower():
                    eachItem.doAction(action)
                    return
            for eachPortal in action.playerRef.roomRef.portals.values():
                if eachPortal.name.lower() == action.string.lower():
                    eachPortal.doAction(action)
                    return
                
        
    def say(self, action):
        if action.playerRef.doAction(action) == 1:
            return
        if action.playerRef.roomRef.doAction(action) == 1:
            return
        if action.playerRef.zoneRef.doAction(action) == 1:
            return
        action.actionType = 'say'
        action.playerRef.writeWithPrompt('You say, "'+action.string+'"')
        self.actionRoomCharacters(action, action.playerRef.zone, action.playerRef.room)
        action.playerRef.roomRef.doAction(action)
        action.playerRef.zoneRef.doAction(action)
        # Add in sending item to Portals
        
    def modifyStat(self, action):
        if action.data1.lower()   == 'item':
            try:
                item = MudDatabase.db.findItem(action.data2)
                item.setStat(action.data3, action.string)
                action.playerRef.writeWithPrompt("Done.")
            except:
                action.playerRef.writeWithPrompt("Cannot find that item!")
                return
            
        elif action.data1.lower() == 'char':
            try:
                char = MudDatabase.db.findChar(action.data2)
                char.setStat(action.data3, action.string)
                action.playerRef.writeWithPrompt("Done.")
            except:
                action.playerRef.writeWithPrompt("Cannot find that character!")
                return
        
    def addStat(self, action):
        if action.data1.lower()   == 'item':
            try:
                # Add conversion to int if value is all digits
                item = MudDatabase.db.findItem(action.data2)
                item.addStat(action.data3, action.string)
                action.playerRef.writeWithPrompt("Done.")
            except:
                action.playerRef.writeWithPrompt("Cannot find that character!")
                return
            
        elif action.data1.lower() == 'char':
            try:
                char = MudDatabase.db.findChar(action.data2)
                char.addStat(action.data3, action.string)
                action.playerRef.writeWithPrompt("Done.")
            except:
                action.playerRef.writeWithPrompt("Cannot find that character!")
                return
        elif action.data1.lower() == 'room':
            pass
        elif action.data1.lower() == 'zone':
            pass
        elif action.data1.lower() == 'portal':
            pass
        else:
            pass
        
    def delStat(self, action):
        if action.data1.lower()   == 'item':
            try:
            # Add conversion to int if value is all digits
                item = MudDatabase.db.findItem(action.data2)
                item.delStat(action.data3, action.string)
                action.playerRef.writeWithPrompt("Done.")
            except:
                action.playerRef.writeWithPrompt("Cannot find that item!")
                return
            
        elif action.data1.lower() == 'char':
            try:
                char = MudDatabase.db.findChar(action.data2)
                char.delStat(action.data3, action.string)
                action.playerRef.writeWithPrompt("Done.")
            except:
                action.playerRef.writeWithPrompt("Cannot find that character!")
                return
        elif action.data1.lower() == 'room':
            pass
        elif action.data1.lower() == 'zone':
            pass
        elif action.data1.lower() == 'portal':
            pass
    
    
    # Functions to send events to various sets of things.
    def actionRoomCharacters(self, action, zone_id, room_id):
        for eachChar in MudDatabase.db.returnRoomCharacters(zone_id, room_id):
            eachChar.doAction(action)
            
    def actionRoomItems(self, action, zone_id, room_id):
        for eachItem in MudDatabase.db.returnRoomItems(zone_id, room_id):
            eachItem.doAction(action)
            
    def actionRoomPortals(self, action, zone_id, room_id):
        for eachItem in MudDatabase.db.returnRoomPortals(zone_id, room_id):
            eachItem.doAction(action)
            
    
actionHandler = MudActionHandler()
            