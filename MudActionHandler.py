"""
This is the Action Handler. It takes the Actions generated by the various
commands, and sends them to all the relevant logic modules. Each command
generates up to 3 actions. The first checks to see if a player *can* do
something. The second does it, and the third notifies everything that the
player did it.

@author: Fletcher Haynes
@copyright: (c)2004 Fletcher Haynes, All rights reserved.
"""

import MudWorld
import MudAction

class MudActionHandler:
    def doAction(self, action):
        if action.info['actionType']   == 'say':
            self.say(action)
        elif action.getType() == 'look':
            self.look(action)
        elif action.getType() == 'enterworld':
            self.enterWorld(action)
        elif action.getType() == 'enterportal':
            self.enterPortal(action)
        else:
            pass
    
    # -------------------------------------- #
    # Functions to pass actions to multiple
    # entities of the same type. All items 
    # in a room, all portals, etc.
    # -------------------------------------- #
            
    def actionRoom(self, action, room):
        """Sends the action instance to the supplied room."""
        room.doAction(action)
        
    def actionRoomItems(self, action, room):
        """Sends the action to all the items in the supplied room."""
        for eachItem in room.getItems().values():
            eachItem.doAction(action)
            
    def actionRoomChars(self, action, room):
        """Sends the action to all the characters in the supplied room."""
        for eachChar in room.getCharacters().values():
            eachChar.doAction(action)

    def actionRoomPortals(self, action, room):
        """Sends the action to all the portals in the supplied room."""
        for eachPortal in room.getPortals().values():
            eachPortal.doAction(action)

            
    # -------------------- #
    #  Querying Functions  #
    # -------------------- #
            
    def queryRoom(self, action):
        """Queries the room of the player that generated the action."""
        return action.getPlayerRef().getRoomRef().doQuery(action)
    
    def queryRoomChars(self, action):
        """
        Queries all the characters in the room of the player that generated
        the action.
        """
        for eachChar in action.getPlayerRef().getRoomRef().getCharacters().values():
            result = eachChar.doQuery(action)
            if result == 1:
                return 1
        return 0
    
    def queryRoomItems(self, action):
        """
        Queries each item in the room of the player that generated the action.
        """
        for eachItem in action.getPlayerRef().getRoomRef().getItems().values():
            result = eachItem.doQuery(action)
            if result == 1:
                return 1
        return 0
    
    def queryRoomPortals(self, action):
        """
        Queries each portal in the room of the player that generated the action.
        """
        
        for eachPortal in action.getPlayerRef().getRoomRef().getPortals().values():
            result = eachPortal.doQuery(action)
            if result == 1:
                return 1
        return 0

    
    # ------------------------------ #
    # Handlers for specific actions  #
    # ------------------------------ #
    
    def enterPortal(self, action):
        """Handles a character attempting to enter a portal."""
        
        # First, we'll get some references for brevity's sake.
        
        # Character who tried to enter the portal
        c = action.getPlayerRef()
        
        # Portal the character tried to enter
        p = action.getData1()
        
        # Current room of the player
        r = c.getRoomRef()
        
        # Current zone of the player
        z = c.getZoneRef()
        
        # Now we need to get some info on where they are trying to go.
        # TODO: Error checking for invalid IDs
        newZone = MudWorld.world.getZone(p.getTargetZone())
        newRoom = newZone.getRoom(p.getTargetRoom())
        
        # Now lets check if they are trying to change zones
        if newZone.getId() == c.getZoneRef().getId():
            changeZone = False
        else:
            changeZone = True

        # If they are going to change zones, we need to do some additional
        # checks.
        
        # TODO: Are we generating too many actions? Also, should we not use
        # the queryZone function? For when we are querying just one thing,
        # should we just query it directly?
        if changeZone:
            result = self.queryZone(MudAction.MudAction("canleavezone", c, c.getZoneRef()))
            if result == 1:
                return
            
            # Now we check the destination zone to make sure they can enter.
            result = self.queryZone(MudAction.MudAction('canenterzone', c, newZone))
            if result == 1:
                return
            
            # Now let's ask the character if they can leave the zone
            result = c.doQuery(MudAction.MudAction('canleavezone', c, c.getRoomRef()))
            if result == 1:
                return
            
            # And ask the character if they can enter a new zone
            result = c.doQuery(MudAction.MudAction('canenterzone', c, newRoom))
            if result == 1:
                return
        
        # Ask the current room if they can leave it.
        result = r.doQuery(MudAction.MudAction('canleaveroom', c))
        if result == 1:
            return
        
        # Ask the new room if they can enter it.
        result = newRoom.doQuery(MudAction.MudAction('canenterroom', c))
        if result == 1:
            return
            
        # Ask the character if they can leave the room
        result = c.doQuery(MudAction.MudAction('canleaveroom', c))
        if result == 1:
            return
        
        # Ask the portal if they can enter it
        result = p.doQuery(MudAction.MudAction('canenterportal', c))
        if result == 1:
            return
        
        # If we are this point, then we know the action is ok.
        # Now, if they changed zones, we need to notify the zones.
        # TODO: Might want to use one action for this part instead of
        # generating a lot of new ones
        
        if changeZone:
            z.doAction(MudAction.MudAction('leavezone', c, z))
            newZone.doAction(MudAction.MudAction('enterzone', c, newZone))
            
        # Now we'll tell all the characters in the old room that they left.
        self.actionRoomChars(MudAction.MudAction('leaveroom', c, p), r)
        
        # Now we'll tell all the items in the old room that they left.
        self.actionRoomItems(MudAction.MudAction('leaveroom', c, p), r)
        
        # And finally we tell the old room
        r.doAction(MudAction.MudAction('leaveroom', c, p))
        
        # Now we tell the portal that they entered it
        p.doAction(MudAction.MudAction('enterportal', c))
        
        # And the character that we entered the portal
        c.doAction(MudAction.MudAction('enterportal', c))
        
        # Now it is time to do the actual mechanics of moving the character.
        # Deleting them from the old room/zone, adding them to the new ones, etc.
        if changeZone:
            # Remove char from old zone
            z.removeCharacter(c.getName())
            
            # Add to new one
            newZone.addCharacter(c)
            
        # Remove them from the old room
        r.removeCharacter(c)

        # Add the character to the new room
        newRoom.addCharacter(c)
        
        # Tell everyone in the new zone that the char is entering
        if changeZone:
            newZone.doAction(MudAction('enterzone', c))
            
            # Tell the char they are entering a new zone.
            c.doAction(MudAction.MudAction('enterzone', c))
            
        # Tell the room they entered
        newRoom.doAction(MudAction.MudAction('enterroom', c, p))
        
        # Tell the characters in the new room that the char entered
        self.actionRoomChars(MudAction.MudAction('enterroom', c, p), newRoom)
        
        # Tell all the items they entered
        self.actionRoomItems(MudAction.MudAction('enterroom', c, p), newRoom)
        
    
    def enterWorld(self, action):
        """Handles setting a player up in the world."""
        # TODO: Error checking for not finding the zone #
        destZone = MudWorld.world.getZone(action.getData1())
        destZone.addCharacter(action.getPlayerRef())
        destRoom = destZone.getRoom(action.getData2())
        destRoom.addCharacter(action.getPlayerRef())
        
        
    def say(self, action):
        """Handles say actions."""
        action.setType('cansay')
        # First we have to check with the room to see if it is ok for them
        # to say something.
        
        result = self.queryRoom(action)
        if result == 1:
            return
        
        # Now we check all the other players in the room.
        result = self.queryRoomChars(action)
        if result == 1:
            return
            
        # Now we check all the items.
        result = self.queryRoomItems(action)
        if result == 1:
            return
        
        # If we are this point, nothing denied the action. So we change the
        # actiontype back to 'say'.
        action.setType('say')
        
        # And now we tell each relevant entity what was said.
        self.actionRoom(action, action.getPlayerRef().getRoomRef())
        self.actionRoomItems(action, action.getPlayerRef().getRoomRef())
        self.actionRoomChars(action, action.getPlayerRef().getRoomRef())

    def look(self, action):
        """Handles look actions."""
        
        action.setType('canlook')
        
        result = self.queryRoom(action)
        if result == 1:
            return
        
        # Now we check all the other players in the room.
        result = self.queryRoomChars(action)
        if result == 1:
            return
            
        # Now we check all the items.
        result = self.queryRoomItems(action)
        if result == 1:
            return
        
        action.setType('look')
        self.actionRoom(action, action.getPlayerRef().getRoomRef())
        self.actionRoomChars(action, action.getPlayerRef().getRoomRef())
        self.actionRoomItems(action, action.getPlayerRef().getRoomRef())
        
        
        
        
    